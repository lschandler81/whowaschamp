version: '3.8'

services:
  # Main application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://whowaschamp:${DB_PASSWORD}@db:5432/whowaschamp_prod
      - DATABASE_PROVIDER=postgresql
      - FEATURES_PPV_FLASHBACK=true
      - FEATURES_ENHANCED_ON_THIS_DAY=true
      - RATE_LIMIT_DELAY_MS=2000
      - ETL_CACHE_DIR=/app/.cache
      - NEXT_PUBLIC_APP_URL=${APP_URL}
    ports:
      - "3000:3000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - etl_cache:/app/.cache
      - etl_logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=whowaschamp_prod
      - POSTGRES_USER=whowaschamp
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/deploy/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whowaschamp -d whowaschamp_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ETL Scheduler (runs ETL jobs on schedule)
  etl-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://whowaschamp:${DB_PASSWORD}@db:5432/whowaschamp_prod
      - DATABASE_PROVIDER=postgresql
      - RATE_LIMIT_DELAY_MS=2000
      - ETL_CACHE_DIR=/app/.cache
      - ETL_SCHEDULE_ENABLED=true
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - etl_cache:/app/.cache
      - etl_logs:/app/logs
      - ./scripts/deploy/crontab:/etc/cron.d/etl-jobs:ro
    networks:
      - app-network
    command: ["crond", "-f", "-l", "2"]

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./scripts/deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./scripts/deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - app-network

volumes:
  db_data:
  redis_data:
  etl_cache:
  etl_logs:

networks:
  app-network:
    driver: bridge
