generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Promotion {
  id                String             @id @default(cuid())
  name              String             @unique
  slug              String             @unique
  logoUrl           String?
  color             String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  championships     Championship[]
  events            Event[]
  profilePromotions ProfilePromotion[]
  rivalries         Rivalry[]

  @@map("promotions")
}

model Event {
  id           String        @id @default(cuid())
  promotionId  String
  name         String
  brand        String?
  date         DateTime
  venue        String?
  city         String?
  country      String?
  isPpv        Boolean       @default(false)
  buyrate      Int?
  attendance   Int?
  posterUrl    String?
  sourceUrl    String?
  dataChecksum String?
  lastScraped  DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  promotion    Promotion     @relation(fields: [promotionId], references: [id])
  headliners   Headliner[]
  matches      Match[]
  titleChanges TitleChange[]

  @@index([date])
  @@index([promotionId, date])
  @@index([isPpv, date])
  @@map("events")
}

model Headliner {
  id        String   @id @default(cuid())
  eventId   String
  side      String
  name      String
  role      String
  result    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("headliners")
}

model TitleChange {
  id           String   @id @default(cuid())
  eventId      String
  titleName    String
  changedHands Boolean  @default(true)
  newChampion  String?
  oldChampion  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  event        Event    @relation(fields: [eventId], references: [id])

  @@map("title_changes")
}

model Profile {
  id                   String             @id @default(cuid())
  slug                 String             @unique
  name                 String             @unique
  nickname             String?
  type                 String
  hometown             String?
  nationality          String?
  height               String?
  weight               String?
  thumbnail            String?
  debut                DateTime?
  retired              DateTime?
  tagline              String?
  bio                  String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  championships        Championship[]
  fighter              FighterProfile?
  matches              MatchParticipant[]
  promotions           ProfilePromotion[]
  rivalriesAsWrestler2 Rivalry[]          @relation("RivalryWrestler2")
  rivalriesAsWrestler1 Rivalry[]          @relation("RivalryWrestler1")
  wrestler             WrestlerProfile?

  @@index([type])
  @@index([slug])
  @@map("profiles")
}

model WrestlerProfile {
  id                     String    @id @default(cuid())
  profileId              String    @unique
  finisher               String?
  era                    String?
  worldTitleReigns       Int       @default(0)
  combinedDaysAsChampion Int       @default(0)
  firstReignDate         DateTime?
  lastReignDate          DateTime?
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  profile                Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("wrestler_profiles")
}

model FighterProfile {
  id          String            @id @default(cuid())
  profileId   String            @unique
  stance      String?
  reach       String?
  wins        Int               @default(0)
  losses      Int               @default(0)
  draws       Int               @default(0)
  titleReigns Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  divisions   FighterDivision[]
  profile     Profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("fighter_profiles")
}

model ProfilePromotion {
  id          String    @id @default(cuid())
  profileId   String
  promotionId String
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  promotion   Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  profile     Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, promotionId])
  @@map("profile_promotions")
}

model FighterDivision {
  id               String         @id @default(cuid())
  fighterProfileId String
  divisionName     String
  isActive         Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  fighterProfile   FighterProfile @relation(fields: [fighterProfileId], references: [id], onDelete: Cascade)

  @@map("fighter_divisions")
}

model Championship {
  id                String    @id @default(cuid())
  profileId         String
  titleName         String
  promotionId       String
  reignNumber       Int
  wonDate           DateTime
  lostDate          DateTime?
  daysHeld          Int?
  wonFrom           String?
  lostTo            String?
  wonAt             String?
  lostAt            String?
  isCurrentChampion Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  promotion         Promotion @relation(fields: [promotionId], references: [id])
  profile           Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([titleName])
  @@index([wonDate])
  @@map("championships")
}

model Match {
  id           String             @id @default(cuid())
  eventId      String?
  matchType    String
  stipulation  String?
  isMainEvent  Boolean            @default(false)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  participants MatchParticipant[]
  event        Event?             @relation(fields: [eventId], references: [id])

  @@map("matches")
}

model MatchParticipant {
  id        String   @id @default(cuid())
  matchId   String
  profileId String
  result    String?
  role      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id])
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, profileId])
  @@map("match_participants")
}

model Rivalry {
  id             String     @id @default(cuid())
  wrestler1Id    String
  wrestler2Id    String
  rivalryName    String?
  startDate      DateTime?
  endDate        DateTime?
  description    String?
  notableMatches String?
  feudIntensity  Int?
  totalMatches   Int?
  promotionId    String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  promotion      Promotion? @relation(fields: [promotionId], references: [id])
  wrestler2      Profile    @relation("RivalryWrestler2", fields: [wrestler2Id], references: [id])
  wrestler1      Profile    @relation("RivalryWrestler1", fields: [wrestler1Id], references: [id])

  @@unique([wrestler1Id, wrestler2Id])
  @@index([wrestler1Id])
  @@index([wrestler2Id])
  @@map("rivalries")
}
